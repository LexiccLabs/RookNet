// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NeoNftProject.Data;

namespace NeoNftProject.Migrations
{
    [DbContext(typeof(NeoNftContext))]
    partial class NeoNftContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NeoNftProject.Data.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressName");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("NeoNftProject.Data.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId");

                    b.Property<decimal>("CurrentPrice");

                    b.Property<long>("Duration");

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("EndPrice");

                    b.Property<int>("IsActive");

                    b.Property<DateTime>("StartDate");

                    b.Property<decimal>("StartPrice");

                    b.Property<int>("TokenId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("TokenId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("NeoNftProject.Data.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId");

                    b.Property<int>("Agility");

                    b.Property<int>("AttackSpeed");

                    b.Property<int>("CriticalStrike");

                    b.Property<int>("Experience");

                    b.Property<int>("Health");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsBrawling");

                    b.Property<bool>("IsBreeding");

                    b.Property<int>("Level");

                    b.Property<int>("Mana");

                    b.Property<int>("Mastery");

                    b.Property<string>("Nickname");

                    b.Property<int>("Stamina");

                    b.Property<string>("TxId");

                    b.Property<int>("Versatility");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("NeoNftProject.Data.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ReceiverId");

                    b.Property<int>("SenderId");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("NeoNftProject.Data.Auction", b =>
                {
                    b.HasOne("NeoNftProject.Data.Address", "Address")
                        .WithMany("Auctions")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NeoNftProject.Data.Token", "Token")
                        .WithMany("Auctions")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NeoNftProject.Data.Token", b =>
                {
                    b.HasOne("NeoNftProject.Data.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NeoNftProject.Data.Transaction", b =>
                {
                    b.HasOne("NeoNftProject.Data.Address", "Receiver")
                        .WithMany("IncomingTransactions")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NeoNftProject.Data.Address", "Sender")
                        .WithMany("OutgoingTransactions")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
